import kernel32;

i32 min(i32 a, i32 b) {
	if (a < b) return a;
	return b;
}

i32 max(i32 a, i32 b) {
	if (a > b) return a;
	return b;
}

void print(u8[] str) {
	void* handle = GetStdHandle(STD_OUTPUT_HANDLE);
	u32 numWritten;
	WriteConsoleA(
		handle,
		str.ptr,
		cast(u32)str.length,
		&numWritten,
		null);
}

void setRangeu8(u8* slice, i64 from, i64 to, u8 value) {
	while(from < to) {
		slice[from] = value;
		++from;
	}
}

void printInt(i64 i)
{
	u8[21] buf;
	u8[] res;
	formatInt(i, &buf, 1, &res);
	print(res);
}

void formatInt(i64 i, u8[21]* output, u32 minSize, u8[]* result)
{
	u32 numDigits = 0;
	if (i == 0)
	{
		if (minSize == 0)
			minSize = 1;
		setRangeu8((*output).ptr, 21 - minSize, 21, '0');
		(*output)[20] = '0';
		numDigits = minSize;
	}
	else
	{
		bool neg = i < 0;
		if (neg) {
			i = -i;
		}
		bool overflow = i < 0;
		if (overflow)
			i = i64.max;

		while (i)
		{
			u8 c = cast(u8)('0' + i % 10);
			(*output)[21 - ++numDigits] = c;
			i /= 10;
		}

		while (numDigits < minSize) {
			(*output)[21 - ++numDigits] = '0';
		}

		if (neg) {
			(*output)[21 - ++numDigits] = '-';
		}
		if (overflow) {
			++(*output)[20];
		}
	}
	//u8[] result;
	(*result).ptr = (*output).ptr + (21 - numDigits);
	(*result).length = numDigits;
	//return result;
	//result = (*output)[$-numDigits..$]
}

void println(u8[] str) {
	print(str);
	u8[2] endl;
	endl[0] = '\n';
	endl[1] = '\0';
	u8[] slice;
	slice.ptr = cast(u8*)&endl;
	slice.length = 1;
	print(endl);
}

i64 cstrlen(u8* str) {
	if (str == null) return 0;

	u8* start = str;
	while(*str)
	{
		++str;
	}
	return str - start;
}

//
u64 rotl(u64 x, u32 k) {
	return (x << k) | (x >> (64 - k));
}

void init_rand_state(u64[2]* state) {
	state[0][0] = GetTickCount64();
	state[0][1] = 0xac32_ee10_a135_0e00;
	xoroshiro128ss_next(state);
	state[0][1] = GetTickCount64();
}

// xoroshiro128**
// init state to random values before starting
u64 xoroshiro128ss_next(u64[2]* state) {
	u64 s0 = (*state)[0];
	u64 s1 = (*state)[1];
	u64 result = rotl(s0 * 5, 7) * 9;

	s1 ^= s0;
	(*state)[0] = rotl(s0, 24) ^ s1 ^ (s1 << 16); // a, b
	(*state)[1] = rotl(s1, 37); // c

	return result;
}

i64 uniform(i64 a, i64 b, u64[2]* state) // inclusive interval []
{
	i64 distance = b - a;
	u64 rand_num = xoroshiro128ss_next(state);
	i64 interval_pos = cast(i64)(rand_num % cast(u64)distance);
	return a + interval_pos;
}

struct Rect
{
	i32 x1;
	i32 y1;
	i32 x2;
	i32 y2;

	// TODO: return Point when compiler will support returning small structs
	void center(Point* p)
	{
		p.x =  (x1 + x2) / 2;
		p.y =  (y1 + y2) / 2;
	}
}

struct Point
{
	i32 x;
	i32 y;
}

bool intersect(Rect a, Rect b)
{
	return a.x1 <= b.x2 && a.x2 >= b.x1 &&
		a.y1 <= b.y2 && a.y2 >= b.y1;
}

// Line visiting algorithm
// Calls callback for all cells between starting and ending position (inclusive)
// Passes userData as first arg of callback
void tran_thong(i32 xstart, i32 ystart, i32 xend, i32 yend, bool function(void*, i32, i32) callback, void* userData)
{
	i32 x = xstart;
	i32 y = ystart;

	if (callback(userData, x, y)) return;

	i32 deltax;
	i32 signdx;
	if (xend >= xstart) {
		deltax = xend - xstart;
		signdx = 1;
	} else {
		deltax = xstart - xend;
		signdx = -1;
	}

	i32 deltay;
	i32 signdy;
	if (yend >= ystart) {
		deltay = yend - ystart;
		signdy = 1;
	} else {
		deltay = ystart - yend;
		signdy = -1;
	}

	i32 test;
	if (signdy == -1)
		test = -1;
	else
		test = 0;

	if (deltax >= deltay) {
		test = (deltax + test) >> 1;
		for (i32 i = 1; i < deltax; ++i) {
			test -= deltay;
			x += signdx;
			if (test < 0) {
				y += signdy;
				test += deltax;
			}
			if (callback(userData, x, y)) return;
		}
	} else {
		test = (deltay + test) >> 1;
		for (i32 i = 1; i < deltay; ++i) {
			test -= deltax;
			y += signdy;
			if (test < 0) {
				x += signdx;
				test += deltay;
			}
			if (callback(userData, x, y)) return;
		}
	}
	if (callback(userData, xend, yend)) return;
}

// Bresenhamâ€™s circle drawing algorithm
void visit_circle(i32 xcenter, i32 ycenter, i32 radius, void function(void*, i32, i32) callback, void* userData)
{
	i32 x = 0;
	i32 y = radius;
	i32 decision = 3 - (2 * radius); // initial decision parameter
	while (x <= y)
	{
		callback(userData,  y + xcenter,  x + ycenter); // octet 1
		callback(userData,  x + xcenter,  y + ycenter); // octet 2
		callback(userData, -x + xcenter,  y + ycenter); // octet 3
		callback(userData, -y + xcenter,  x + ycenter); // octet 4
		callback(userData, -y + xcenter, -x + ycenter); // octet 5
		callback(userData, -x + xcenter, -y + ycenter); // octet 6
		callback(userData,  x + xcenter, -y + ycenter); // octet 7
		callback(userData,  y + xcenter, -x + ycenter); // octet 8

		// next decision parameter
		if (decision < 0)
		{
			decision = decision + 4 * x + 6;
			++x;
		}
		else
		{
			decision = decision + 4 * (x - y) + 10;
			++x;
			--y;
		}
	}
}
