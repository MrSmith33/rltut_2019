import utils;
import sdl;
import sdlimage;
import kernel32;
import window;

import tile;
import entity;

enum scale = 2;
enum i32 TILE_W = 10;
enum i32 TILE_H = 10;
enum Color DARK_WALL = Color(0, 0, 100);
enum Color DARK_GROUND = Color(50, 50, 150);

struct Color {
	u8 r;
	u8 g;
	u8 b;
}

struct GameMap
{
	enum map_width = 80;
	enum map_height = 80;
	enum u16 max_entities = 1000;
	enum u32 max_rooms = 30;
	enum max_monsters_per_room = 8;
	enum i32 room_min_size = 3;
	enum i32 room_max_size = 20;

	u64[2]* rand_state;
	i32 view_offset_x;
	i32 view_offset_y;
	i32 viewport_w;
	i32 viewport_h;
	i32 view_radius;
	Tile[map_width][map_height] tiles;
	Entity[max_entities] entities;
	u16 num_entities;

	void add_entity(u8[] name, i32 x, i32 y, u8 c, u8 r, u8 g, u8 b, bool blocks)
	{
		Entity* entity = &entities[num_entities];
		*entity = Entity(x, y, 0, c, r, g, b, name);
		print("Add ");
		print(name);
		print(" at ");
		printInt(x);
		print(", ");
		printInt(y);
		println(";");
		if (blocks) {
			entity.flags |= EntityFlags.blocks;
			tiles[y][x].blocking_entity = num_entities;
		}
		++num_entities;
	}

	Entity* get_blocking_entities_at_location(i32 x, i32 y)
	{
		for (u32 i = 0; i < num_entities; ++i)
		{
			Entity* e = &entities[i];
			if (e.blocks && e.x == x && e.y == y)
				return e;
		}
		return null;
	}

	bool valid_pos(i32 x, i32 y)
	{
		if (x < 0) return false;
		if (x >= map_width) return false;
		if (y < 0) return false;
		if (y >= map_height) return false;
		return true;
	}

	bool blocks_walk(i32 x, i32 y)
	{
		if (x < 0) return true;
		if (x >= map_width) return true;
		if (y < 0) return true;
		if (y >= map_height) return true;
		return tiles[y][x].blocked;
	}

	void update_view_offset(i32 player_x, i32 player_y)
	{
		i32 halfw = viewport_w / 2;
		i32 halfh = viewport_h / 2;

		view_offset_x = (halfw - player_x) * TILE_W * scale;
		view_offset_y = (halfh - player_y) * TILE_H * scale;
	}

	void initialize_tiles()
	{
		for (i32 y = 0; y < map_height; ++y)
		{
			for (i32 x = 0; x < map_width; ++x)
			{
				tiles[y][x].flags = TileFlags.blocks_walk | TileFlags.blocks_sight;
				tiles[y][x].blocking_entity = EntityId.max;
			}
		}
	}

	void create_room(Rect room)
	{
		for (i32 y = room.y1 + 1; y < room.y2; ++y)
		{
			for (i32 x = room.x1 + 1; x < room.x2; ++x)
			{
				tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
				tiles[y][x].flags |= TileFlags.is_visible;
			}
		}
	}

	void create_h_tunnel(i32 x1, i32 x2, i32 y)
	{
		i32 max_x = max(x1, x2) + 1;
		for (i32 x = min(x1, x2); x < max_x; ++x)
		{
			tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
			tiles[y][x].flags |= TileFlags.is_visible;
		}
	}

	void create_v_tunnel(i32 y1, i32 y2, i32 x)
	{
		i32 max_y = max(y1, y2) + 1;
		for (i32 y = min(y1, y2); y < max_y; ++y)
		{
			tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
			tiles[y][x].flags |= TileFlags.is_visible;
		}
	}

	void make_map(Entity* player)
	{
		Rect[max_rooms] rooms;

		//create_room(Rect(0,0,map_width-1, map_height-1));
		
		for (u32 roomIndex = 0; roomIndex < max_rooms; ++roomIndex)
		{
			// random width and height
			i32 w = cast(i32)uniform(room_min_size, room_max_size, rand_state);
			i32 h = cast(i32)uniform(room_min_size, room_max_size, rand_state);

			// random position without going out of the boundaries of the map
			i32 x = cast(i32)uniform(0, map_width - w - 1, rand_state);
			i32 y = cast(i32)uniform(0, map_height - h - 1, rand_state);

			rooms[roomIndex] = Rect(x, y, x+w, y+h);

			bool hasIntersections;
			for (u32 otherRoom = 0; otherRoom < roomIndex; ++otherRoom)
			{
				if (intersect(rooms[roomIndex], rooms[otherRoom])) {
					hasIntersections = true;
					break;
				}
			}

			if (!hasIntersections)
			{
				create_room(rooms[roomIndex]);
				i32 new_x = (rooms[roomIndex].x1 + rooms[roomIndex].x2) / 2;
				i32 new_y = (rooms[roomIndex].y1 + rooms[roomIndex].y2) / 2;

				if (roomIndex == 0)
				{
					player.x = new_x;
					player.y = new_y;
					tiles[new_y][new_x].blocking_entity = 0;
				}
				else
				{
					// connect to the previous room with a tunnel
					Point prev;
					rooms[roomIndex - 1].center(&prev);

					if (uniform(0, 1, rand_state) == 1)
					{
						// first move horizontally, then vertically
						create_h_tunnel(prev.x, new_x, prev.y);
						create_v_tunnel(prev.y, new_y, new_x);
					}
					else
					{
						// first move vertically, then horizontally
						create_v_tunnel(prev.y, new_y, prev.x);
						create_h_tunnel(prev.x, new_x, new_y);
					}
				}

				place_entities(rooms[roomIndex]);
			}
		}
	}

	void place_entities(Rect room)
	{
		// Get a random number of monsters
		i32 number_of_monsters = cast(i32)uniform(0, max_monsters_per_room, rand_state);

		for (i32 i = 0; i < number_of_monsters; ++i)
		{
			// Choose a random location in the room
			i32 x = cast(i32)uniform(room.x1 + 1, room.x2 - 1, rand_state);
			i32 y = cast(i32)uniform(room.y1 + 1, room.y2 - 1, rand_state);

			if (!tiles[y][x].has_blocking_entity)
			{
				if (uniform(0, 100, rand_state) < 80)
					add_entity("Orc", x, y, 142, 0, 250, 0, true);
				else
					add_entity("Troll", x, y, 115, 0, 200, 0, true);
			}
		}
	}
}

enum VIEW_RADIUS = 7;
enum VIEW_RADIUS_SQR = VIEW_RADIUS * VIEW_RADIUS;

struct fov_data
{
	GameMap* map;
	i32 player_x;
	i32 player_y;
}

bool visibility_check(void* userData, i32 x, i32 y)
{
	fov_data* data = cast(fov_data*)userData;
	GameMap* map = data.map;

	i32 dist4 = (x*x + y*y) * 4;
	i32 r = map.view_radius;
	i32 max_dist4 = (r * r + r) * 4 + 1;
	// (x*x + y*y > (r+0.5)^2) integer arithmetics
	if (dist4 > max_dist4) return true;

	i32 map_x = data.player_x + x;
	i32 map_y = data.player_y + y;
	map.tiles[map_y][map_x].flags |= TileFlags.is_visible;
	return map.blocks_walk(map_x, map_y);
}

void update_fov(GameMap* map, Entity* player)
{
	// clear visibility
	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			map.tiles[y][x].flags &= ~TileFlags.is_visible;
		}
	}

	fov_data data = fov_data(map, player.x, player.y);

	i32 view_radius = map.view_radius;
	for (i32 i = -view_radius; i <= view_radius; ++i)
	{
		tran_thong(0, 0, -view_radius, i, &visibility_check, cast(void*)&data);
		tran_thong(0, 0,  view_radius, i, &visibility_check, cast(void*)&data);
		tran_thong(0, 0,  i,  view_radius, &visibility_check, cast(void*)&data);
		tran_thong(0, 0,  i, -view_radius, &visibility_check, cast(void*)&data);
	}
}

void render_all(Window* win, GameMap* map)
{
	SDL_Rect from;
	SDL_Rect to;

	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			Tile tile = map.tiles[y][x];
			if (tile.visible)
			{
				if (tile.block_sight) {
					SDL_SetRenderDrawColor(win.sdl_renderer, 20, 20, 120, 255);
					//color = LIGHT_WALL;
				} else {
					SDL_SetRenderDrawColor(win.sdl_renderer, 70, 70, 170, 255);
					//color = LIGHT_GROUND;
				}
				map.tiles[y][x].flags |= TileFlags.is_explored;
			}
			else if (tile.explored)
			{
				if (tile.block_sight) {
					SDL_SetRenderDrawColor(win.sdl_renderer, 0, 0, 100, 255);
					//color = DARK_WALL;
				} else {
					SDL_SetRenderDrawColor(win.sdl_renderer, 50, 50, 150, 255);
					//color = DARK_GROUND;
				}
			}
			else
				SDL_SetRenderDrawColor(win.sdl_renderer, 0, 0, 0, 255);


			//SDL_SetRenderDrawColor(win.sdl_renderer, color[0], color[1], color[2]);
			to = SDL_Rect(
				x * scale * TILE_W + map.view_offset_x,
				y * scale * TILE_H + map.view_offset_y,
				TILE_W * scale,
				TILE_H * scale);
			SDL_RenderFillRect(win.sdl_renderer, &to);
		}
	}

	for (u32 i = 0; i < map.num_entities; ++i)
	{
		Tile tile = map.tiles[map.entities[i].y][map.entities[i].x];
		if (!tile.visible) continue;
		from = SDL_Rect(map.entities[i].char * TILE_W, 0, TILE_W, TILE_H); // TODO: use letter coords from font
		to = SDL_Rect(
			map.entities[i].x * scale * TILE_W + map.view_offset_x,
			map.entities[i].y * scale * TILE_H + map.view_offset_y,
			TILE_W * scale, TILE_H * scale); // TODO: use letter coords from font

		SDL_SetTextureColorMod(win.font, map.entities[i].r, map.entities[i].g, map.entities[i].b);
		SDL_RenderCopy(win.sdl_renderer, win.font, &from, &to);
	}
}

GameMap global_map;

enum GameState : u8 {
	player_turn = 0,
	enemy_turn = 1,
}

i32 main(void* hInstance, void* hPrevInstance, u8* lpCmdLine, i32 nShowCmd)
{
	u64[2] rand_state;
	init_rand_state(&rand_state);

	Window win;
	i32 SCREEN_WIDTH = 800;
	i32 SCREEN_HEIGHT = 600;

	window_init(&win, SCREEN_WIDTH, SCREEN_HEIGHT, "RL tutorial in Vox lang");

	bool run = true;
	SDL_Event e;

	GameMap* map = &global_map;
	map.rand_state = &rand_state;
	map.view_offset_x = 0;
	map.view_offset_y = 0;
	map.view_radius = 7;
	map.viewport_w = SCREEN_WIDTH / (TILE_W * scale);
	map.viewport_h = SCREEN_HEIGHT / (TILE_H * scale);
	map.num_entities = 0;

	map.add_entity("Player", map.map_width/2, map.map_height/2, 32, 0, 255, 0, true);
	Entity* player = &map.entities[0];

	map.initialize_tiles();
	map.make_map(player);

	bool recalc_fov = true;

	i32 mouse_x;
	i32 mouse_y;

	u8 game_state = GameState.player_turn;

	while (run)
	{
		u32 buttons_pressed = SDL_GetMouseState(&mouse_x, &mouse_y);
		i32 cursor_map_x = (mouse_x - map.view_offset_x) / (TILE_W * scale);
		i32 cursor_map_y = (mouse_y - map.view_offset_y) / (TILE_H * scale);

		if (map.valid_pos(cursor_map_x, cursor_map_y))
		{
			if (buttons_pressed & SDL_BUTTON_LEFT_MASK)
			{
				map.tiles[cursor_map_y][cursor_map_x].flags |= TileFlags.blocks_walk | TileFlags.blocks_sight;
				recalc_fov = true;
			}
			else if (buttons_pressed & SDL_BUTTON_RIGHT_MASK)
			{
				map.tiles[cursor_map_y][cursor_map_x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
				recalc_fov = true;
			}
		}

		while (SDL_PollEvent(&e) != 0)
		{
			i32 dx;
			i32 dy;
			bool doMove = false;

			if (e.type == SDL_EventType.SDL_QUIT) {
				run = false;
			}
			else if (e.type == SDL_EventType.SDL_KEYDOWN)
			{
				SDL_KeyboardEvent* key = cast(SDL_KeyboardEvent*)&e;
				if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_ESCAPE) {
					run = false;
				}

				if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_D) {
					doMove = true;
					++dx;
				} else if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_A) {
					doMove = true;
					--dx;
				} else if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_W) {
					doMove = true;
					--dy;
				} else if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_S) {
					doMove = true;
					++dy;
				} else if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_LEFTBRACKET) {
					if (map.view_radius > 0) {
						--map.view_radius;
						recalc_fov = true;
					}
				} else if (key.keysym.scancode == SDL_Scancode.SDL_SCANCODE_RIGHTBRACKET) {
					++map.view_radius;
					recalc_fov = true;
				}
			}

			if (doMove && game_state == GameState.player_turn)
			{
				i32 destx = player.x + dx;
				i32 desty = player.y + dy;

				if (!map.blocks_walk(destx, desty))
				{
					Entity* target = map.get_blocking_entities_at_location(destx, desty);

					if (target != null)
					{
						print("You kick the ");
						print(target.name);
						println(" in the shins, much to its annoyance!");
					}
					else
					{
						recalc_fov = true;
						player.move(dx, dy);
					}
					game_state = GameState.enemy_turn;
				}
			}
		}

		if (game_state == GameState.enemy_turn)
		{
			for (u32 i = 1; i < map.num_entities; ++i)
			{
				Entity* e = &map.entities[i];
				print("The ");
				print(e.name);
				println(" ponders the meaning of its existence.");
			}
			game_state = GameState.player_turn;
		}

		SDL_SetRenderDrawColor(win.sdl_renderer, 0, 0, 0, 0);
		SDL_RenderClear(win.sdl_renderer);

		if (recalc_fov) {
			update_fov(map, player);
			map.update_view_offset(player.x, player.y);
			recalc_fov = false;
		}
		render_all(&win, map);
		SDL_RenderPresent(win.sdl_renderer);
	}

	window_destroy(&win);
	ExitProcess(0);
	return 0;
}
