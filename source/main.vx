import utils;
import sdl;
import sdlimage;
import kernel32;
import window;

import tile;
import entity;

enum scale = 2;
enum i32 TILE_SIZE = 10;

enum Colors : Color {
	UNEXPLORED = Color(0, 0, 0),
	DARK_WALL = Color(0, 0, 100),
	DARK_GROUND = Color(50, 50, 150),
	LIGHT_WALL = Color(20, 20, 120),
	LIGHT_GROUND = Color(70, 70, 170),
}

struct Color {
	u8 r;
	u8 g;
	u8 b;
	u8 a = 255;
}

struct GameMap
{
	enum map_width = 80;
	enum map_height = 80;
	enum u16 max_entities = 1000;
	enum u32 max_rooms = 30;
	enum max_monsters_per_room = 8;
	enum i32 room_min_size = 3;
	enum i32 room_max_size = 20;
	enum EntityId playerId = 0;

	u8 game_state;
	u64[2] rand_state;
	i32 view_offset_x;
	i32 view_offset_y;
	i32 viewport_w;
	i32 viewport_h;
	i32 view_radius;
	Tile[map_width][map_height] tiles;
	Array[Point] queue;
	Entity[max_entities] entities;
	EntityId num_entities;
	Fighter[max_entities] fighters;
	FighterId num_fighters;
	Ai[max_entities] ais;
	AiId num_ais;

	bool show_dmap;

	void init(i32 window_w, i32 window_h)
	{
		queue.extend(cast(u32)(map_width * map_height));
		init_rand_state(&rand_state);
		view_offset_x = 0;
		view_offset_y = 0;
		viewport_w = window_w / (TILE_SIZE * scale);
		viewport_h = window_h / (TILE_SIZE * scale);
		view_radius = 7;
		num_entities = 0;
		num_fighters = 0;
		num_ais = 0;

		// blocking_entity will be erased by initialize_tiles() and written by make_map()
		EntityId eid = add_entity("Player", map_width/2, map_height/2, '@', RenderOrder.ACTOR, 255, 255, 255, true);
		add_fighter(eid, 30, 30, 2, 5);

		initialize_tiles();
		make_map(&entities[playerId]);

		game_state = GameState.PLAYER_TURN;
	}

	EntityId add_entity(u8[] name, i32 x, i32 y, u8 c, u8 render_order, u8 r, u8 g, u8 b, bool blocks)
	{
		EntityId eid = num_entities++;
		Entity* entity = &entities[eid];
		*entity = Entity(x, y, 0, c, render_order, r, g, b, name);
		// future: println($"Add $eid $name at $x, $y;");
		// future: println("Add {} {} at {}, {};", eid, name, x, y);
		//print("Add ");
		//printInt(eid);
		//print(" ");
		//print(name);
		//print(" at ");
		//printInt(x);
		//print(", ");
		//printInt(y);
		//println(";");
		if (blocks) {
			entity.flags |= EntityFlags.blocks;
			tiles[y][x].blocking_entity = eid;
		}
		return eid;
	}

	void add_fighter(EntityId owner, u16 max_hp, u16 hp, u16 defense, u16 power)
	{
		FighterId fid = num_fighters++;
		entities[owner].fighter = fid;
		fighters[fid] = Fighter(owner, max_hp, hp, defense, power);
		//print("new fighter ");
		//printInt(owner); print(" id ");
		//printInt(fighters[fid].max_hp); print(" MAXHP ");
		//printInt(fighters[fid].hp); print(" HP ");
		//printInt(fighters[fid].defense); print(" DEF ");
		//printInt(fighters[fid].power); println(" STR");
	}

	void add_ai(EntityId owner)
	{
		AiId aid = num_ais++;
		entities[owner].ai = aid;
		ais[aid] = Ai(owner);
	}

	EntityId get_blocking_entities_at_location(i32 x, i32 y)
	{
		for (EntityId i = 0; i < num_entities; ++i)
		{
			Entity* e = &entities[i];
			if (e.blocks && e.x == x && e.y == y)
				return i;
		}
		return EntityId.max;
	}

	bool valid_pos(i32 x, i32 y)
	{
		if (x < 0) return false;
		if (x >= map_width) return false;
		if (y < 0) return false;
		if (y >= map_height) return false;
		return true;
	}

	bool blocks_walk(i32 x, i32 y)
	{
		if (x < 0) return true;
		if (x >= map_width) return true;
		if (y < 0) return true;
		if (y >= map_height) return true;
		return tiles[y][x].blocked;
	}

	void update_view_offset(i32 player_x, i32 player_y)
	{
		i32 halfw = viewport_w / 2;
		i32 halfh = viewport_h / 2;

		view_offset_x = (halfw - player_x) * TILE_SIZE * scale;
		view_offset_y = (halfh - player_y) * TILE_SIZE * scale;
	}

	void initialize_tiles()
	{
		for (i32 y = 0; y < map_height; ++y)
		{
			for (i32 x = 0; x < map_width; ++x)
			{
				tiles[y][x] = Tile(TileFlags.blocks_walk | TileFlags.blocks_sight, 0, EntityId.max);
			}
		}
	}

	void create_room(Rect room)
	{
		for (i32 y = room.y1 + 1; y < room.y2; ++y)
		{
			for (i32 x = room.x1 + 1; x < room.x2; ++x)
			{
				tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
				tiles[y][x].flags |= TileFlags.is_visible;
			}
		}
	}

	void create_h_tunnel(i32 x1, i32 x2, i32 y)
	{
		i32 max_x = max[i32](x1, x2) + 1;
		for (i32 x = min[i32](x1, x2); x < max_x; ++x)
		{
			tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
			tiles[y][x].flags |= TileFlags.is_visible;
		}
	}

	void create_v_tunnel(i32 y1, i32 y2, i32 x)
	{
		i32 max_y = max[i32](y1, y2) + 1;
		for (i32 y = min[i32](y1, y2); y < max_y; ++y)
		{
			tiles[y][x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
			tiles[y][x].flags |= TileFlags.is_visible;
		}
	}

	void make_map(Entity* player)
	{
		Rect[max_rooms] rooms;

		//create_room(Rect(0,0,map_width-1, map_height-1));
		
		for (u32 roomIndex = 0; roomIndex < max_rooms; ++roomIndex)
		{
			// random width and height
			i32 w = cast(i32)uniform(room_min_size, room_max_size, &rand_state);
			i32 h = cast(i32)uniform(room_min_size, room_max_size, &rand_state);

			// random position without going out of the boundaries of the map
			i32 x = cast(i32)uniform(0, map_width - w - 1, &rand_state);
			i32 y = cast(i32)uniform(0, map_height - h - 1, &rand_state);

			rooms[roomIndex] = Rect(x, y, x+w, y+h);

			bool hasIntersections;
			for (u32 otherRoom = 0; otherRoom < roomIndex; ++otherRoom)
			{
				if (intersect(rooms[roomIndex], rooms[otherRoom])) {
					hasIntersections = true;
					break;
				}
			}

			if (!hasIntersections)
			{
				create_room(rooms[roomIndex]);
				i32 new_x = (rooms[roomIndex].x1 + rooms[roomIndex].x2) / 2;
				i32 new_y = (rooms[roomIndex].y1 + rooms[roomIndex].y2) / 2;

				if (roomIndex == 0)
				{
					player.x = new_x;
					player.y = new_y;
					tiles[new_y][new_x].blocking_entity = 0;
				}
				else
				{
					// connect to the previous room with a tunnel
					Point prev;
					rooms[roomIndex - 1].center(&prev);

					if (uniform(0, 1, &rand_state) == 1)
					{
						// first move horizontally, then vertically
						create_h_tunnel(prev.x, new_x, prev.y);
						create_v_tunnel(prev.y, new_y, new_x);
					}
					else
					{
						// first move vertically, then horizontally
						create_v_tunnel(prev.y, new_y, prev.x);
						create_h_tunnel(prev.x, new_x, new_y);
					}
				}

				place_entities(rooms[roomIndex]);
			}
		}
	}

	void place_entities(Rect room)
	{
		// Get a random number of monsters
		i32 number_of_monsters = cast(i32)uniform(0, max_monsters_per_room, &rand_state);

		for (i32 i = 0; i < number_of_monsters; ++i)
		{
			// Choose a random location in the room
			i32 x = cast(i32)uniform(room.x1 + 1, room.x2 - 1, &rand_state);
			i32 y = cast(i32)uniform(room.y1 + 1, room.y2 - 1, &rand_state);

			if (!tiles[y][x].has_blocking_entity)
			{
				if (uniform(0, 100, &rand_state) < 80)
				{
					EntityId eid = add_entity("Orc", x, y, 'o', RenderOrder.ACTOR, 0, 250, 0, true);
					add_fighter(eid, 10, 10, 0, 3);
					add_ai(eid);
				}
				else
				{
					EntityId eid = add_entity("Troll", x, y, 'T', RenderOrder.ACTOR, 0, 200, 0, true);
					add_fighter(eid, 16, 16, 1, 4);
					add_ai(eid);
				}
			}
		}
	}

	void move_to(EntityId eid, i32 dest_x, i32 dest_y)
	{
		Entity* e = &entities[eid];

		//print("Move ");
		//printInt(e.x);
		//print(" ");
		//printInt(e.y);
		//print(" -> ");
		//printInt(dest_x);
		//print(" ");
		//printInt(dest_y);
		//print(" ");
		//print(e.name);
		//println;

		tiles[e.y][e.x].blocking_entity = EntityId.max;
		e.x = dest_x;
		e.y = dest_y;
		tiles[dest_y][dest_x].blocking_entity = eid;
	}

	i32 distance_between(EntityId eid_a, EntityId eid_b)
	{
		Entity* a = &entities[eid_a];
		Entity* b = &entities[eid_b];
		i32 dx = abs(b.x - a.x);
		i32 dy = abs(b.y - a.y);
		return max[i32](dx, dy);
	}

	void move_towards(EntityId eid, i32 target_x, i32 target_y)
	{
		struct MoveData
		{
			GameMap* map;
			EntityId eid;
		}

		bool move_visitor(void* _data, i32 x, i32 y)
		{
			MoveData data = *cast(MoveData*)_data;

			if (!data.map.blocks_walk(x, y))
			{
				EntityId targetId = data.map.get_blocking_entities_at_location(x, y);
				if (targetId == EntityId.max)
				{
					Entity* e = &data.map.entities[data.eid];
					data.map.move_to(data.eid, x, y);
				}
			}
			return true;
		}

		MoveData data = MoveData(this, eid);
		Entity* e = &entities[eid];
		tran_thong(e.x, e.y, target_x, target_y, &move_visitor, cast(void*)&data, LineVisitFlags.SKIP_START);
	}

	void move_towards_player(EntityId eid)
	{
		struct MinData
		{
			Point player_pos;
			u16 dist; // distance to the best pos
			u16 manhattan; // manhattan dist between best pos and player
			Point p; // position to check
		}

		// chooses the best position to move into
		void choosePos(GameMap* map, MinData* minData, Point pos)
		{
			Tile* t = &map.tiles[pos.y][pos.x];
			if (t.blocked) return;

			u16 dist = t.distance_to_player;
			if (dist > minData.dist) return;

			u16 pos_manhattan = cast(u16)manhattan(pos, minData.player_pos);
			if (dist < minData.dist || pos_manhattan < minData.manhattan) {
				minData.p = pos;
				minData.dist = dist;
				minData.manhattan = pos_manhattan;
			}
		}

		Entity* e = &entities[eid];
		Entity* player = &entities[playerId];
		MinData minPoint = MinData(Point(player.x, player.y), u16.max);

		Point p = Point(e.x, e.y);
		choosePos(this, &minPoint, Point(p.x - 1, p.y - 1));
		choosePos(this, &minPoint, Point(p.x    , p.y - 1));
		choosePos(this, &minPoint, Point(p.x + 1, p.y - 1));
		choosePos(this, &minPoint, Point(p.x - 1, p.y    ));
		choosePos(this, &minPoint, Point(p.x + 1, p.y    ));
		choosePos(this, &minPoint, Point(p.x - 1, p.y + 1));
		choosePos(this, &minPoint, Point(p.x    , p.y + 1));
		choosePos(this, &minPoint, Point(p.x + 1, p.y + 1));

		if (minPoint.dist != u16.max)
		{
			move_to(eid, minPoint.p.x, minPoint.p.y);
		}
	}
}

u32 manhattan(Point a, Point b)
{
	u32 dx = cast(u32)abs(b.x - a.x);
	u32 dy = cast(u32)abs(b.y - a.y);
	return dx + dy;
}

struct Panel
{

}

enum VIEW_RADIUS = 7;
enum VIEW_RADIUS_SQR = VIEW_RADIUS * VIEW_RADIUS;

struct fov_data
{
	GameMap* map;
	i32 player_x;
	i32 player_y;
}

bool visibility_check(void* userData, i32 x, i32 y)
{
	fov_data* data = cast(fov_data*)userData;
	GameMap* map = data.map;

	i32 dist4 = (x*x + y*y) * 4;
	i32 r = map.view_radius;
	i32 max_dist4 = (r * r + r) * 4 + 1;
	// (x*x + y*y > (r+0.5)^2) integer arithmetics
	if (dist4 > max_dist4) return true;

	i32 map_x = data.player_x + x;
	i32 map_y = data.player_y + y;
	map.tiles[map_y][map_x].flags |= TileFlags.is_visible;
	return map.blocks_walk(map_x, map_y);
}

void update_fov(GameMap* map, Entity* player)
{
	// clear visibility
	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			map.tiles[y][x].flags &= ~TileFlags.is_visible;
		}
	}

	fov_data data = fov_data(map, player.x, player.y);

	i32 view_radius = map.view_radius;
	for (i32 i = -view_radius; i <= view_radius; ++i)
	{
		tran_thong(0, 0, -view_radius, i, &visibility_check, cast(void*)&data, 0);
		tran_thong(0, 0,  view_radius, i, &visibility_check, cast(void*)&data, 0);
		tran_thong(0, 0,  i,  view_radius, &visibility_check, cast(void*)&data, 0);
		tran_thong(0, 0,  i, -view_radius, &visibility_check, cast(void*)&data, 0);
	}
}

void update_distance_maps(GameMap* map, Entity* player)
{
	i64 start = curMsecs;

	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			Tile* tile = &map.tiles[y][x];
			tile.distance_to_player = u16.max;
		}
	}
	i64 clearTime = curMsecs;

	Tile* player_tile = &map.tiles[player.y][player.x];
	player_tile.distance_to_player = 0;
	map.queue.put(Point(player.x, player.y));

	u32 maxLength;
	u32 cursor;
	while (map.queue.length > cursor)
	{
		void update_neighbor(GameMap* map, u16 ndistance, Point neighbor)
		{
			if (map.blocks_walk(neighbor.x, neighbor.y)) return;
			// not needed, because there is a border around map
			//if (neighbor.x < 0) return;
			//if (neighbor.x >= map.map_width) return;
			//if (neighbor.y < 0) return;
			//if (neighbor.y >= map.map_height) return;

			Tile* t = &map.tiles[neighbor.y][neighbor.x];
			if (t.blocked) return;
			if (t.distance_to_player <= ndistance) return;

			t.distance_to_player = ndistance;
			map.queue.put(neighbor);
		}
		maxLength = max[u32](maxLength, map.queue.length - cursor);

		Point p = map.queue.bufPtr[cursor];
		u16 neighbour_dist = map.tiles[p.y][p.x].distance_to_player + 1;
		
		update_neighbor(map, neighbour_dist, Point(p.x - 1, p.y - 1));
		update_neighbor(map, neighbour_dist, Point(p.x    , p.y - 1));
		update_neighbor(map, neighbour_dist, Point(p.x + 1, p.y - 1));
		update_neighbor(map, neighbour_dist, Point(p.x - 1, p.y    ));
		update_neighbor(map, neighbour_dist, Point(p.x + 1, p.y    ));
		update_neighbor(map, neighbour_dist, Point(p.x - 1, p.y + 1));
		update_neighbor(map, neighbour_dist, Point(p.x    , p.y + 1));
		update_neighbor(map, neighbour_dist, Point(p.x + 1, p.y + 1));
		++cursor;
	}

	map.queue.clear;
	i64 end = curMsecs;
	println(
		"clear time ", clearTime - start,
		" map time ", end - clearTime,
		" iters ", cursor,
		" max len ", maxLength);
}

void render_int(Window* win, i64 i, i32 x, i32 y)
{
	u8[21] buf;
	u8[] res = formatInt(i, &buf, 1);
	render_string(win, res, x, y);
}

void render_string(Window* win, u8[] str, i32 x, i32 y)
{
	y *= scale * TILE_SIZE;
	for (u64 i = 0; i < str.length; ++i)
	{
		i32 char_id = cast(i32)str[i] - 32;
		i32 from_x = (char_id % 32) * TILE_SIZE;
		i32 from_y = (char_id / 32) * TILE_SIZE;
		SDL_Rect from = SDL_Rect(from_x, from_y, TILE_SIZE, TILE_SIZE);
		SDL_Rect to = SDL_Rect(
			(x + cast(i32)i) * scale * TILE_SIZE,
			y,
			TILE_SIZE * scale, TILE_SIZE * scale);

		SDL_RenderCopy(win.sdl_renderer, win.font, &from, &to);
	}
}

void render_all(Window* win, GameMap* map, Point mouse_pos)
{
	// Render tiles
	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			Tile* tile_ptr = &map.tiles[y][x];
			tile_ptr.max_render_order = 0; // reset ordering
			Tile tile = *tile_ptr;

			Color color;
			if (tile.visible)
			{
				if (tile.block_sight) color = Colors.LIGHT_WALL;
				else color = Colors.LIGHT_GROUND;
				map.tiles[y][x].flags |= TileFlags.is_explored;
			}
			else if (tile.explored)
			{
				if (tile.block_sight) color = Colors.DARK_WALL;
				else color = Colors.DARK_GROUND;
			}
			else color = Colors.UNEXPLORED;

			SDL_SetRenderDrawColor(win.sdl_renderer, color.r, color.g, color.b, color.a);

			SDL_Rect to = SDL_Rect(
				x * scale * TILE_SIZE + map.view_offset_x,
				y * scale * TILE_SIZE + map.view_offset_y,
				TILE_SIZE * scale,
				TILE_SIZE * scale);
			SDL_RenderFillRect(win.sdl_renderer, &to);
		}
	}

	// Render visible entities
	for (EntityId i = 0; i < map.num_entities; ++i)
	{
		Entity* e = &map.entities[i];
		Tile* tile = &map.tiles[e.y][e.x];

		// only show visible entities
		if (!tile.visible) continue;

		// only show if no entity with higher order was drawn to this tile
		if (tile.max_render_order > e.render_order) continue;
		tile.max_render_order = e.render_order;

		i32 char_id = cast(i32)e.char - 32;
		i32 from_x = (char_id % 32) * TILE_SIZE;
		i32 from_y = (char_id / 32) * TILE_SIZE;
		SDL_Rect from = SDL_Rect(from_x, from_y, TILE_SIZE, TILE_SIZE);
		SDL_Rect to = SDL_Rect(
			e.x * scale * TILE_SIZE + map.view_offset_x,
			e.y * scale * TILE_SIZE + map.view_offset_y,
			TILE_SIZE * scale, TILE_SIZE * scale);

		//SDL_SetRenderDrawColor(win.sdl_renderer, e.r, e.g, e.b, 255);
		//SDL_RenderFillRect(win.sdl_renderer, &to);
		SDL_SetTextureColorMod(win.font, e.r, e.g, e.b);
		SDL_RenderCopy(win.sdl_renderer, win.font, &from, &to);
	}

	// Show HP
	SDL_SetTextureColorMod(win.font, 255, 255, 255);
	Entity* player = &map.entities[map.playerId];
	Fighter* player_fighter = &map.fighters[player.fighter];
	render_string(win, "HP:", 0, 0);
	render_int(win, player_fighter.hp, 3, 0);
	render_string(win, "/", 6, 0);
	render_int(win, player_fighter.max_hp, 7, 0);

	render_string(win, "X:", 0, 1);
	render_int(win, mouse_pos.x, 2, 1);
	render_string(win, "Y:", 6, 1);
	render_int(win, mouse_pos.y, 8, 1);

	if (map.show_dmap) render_distance_map(win, map);
}

void render_distance_map(Window* win, GameMap* map)
{
	for (i32 y = 0; y < map.map_height; ++y)
	{
		for (i32 x = 0; x < map.map_width; ++x)
		{
			Tile* tile_ptr = &map.tiles[y][x];
			u16 dist = tile_ptr.distance_to_player;
			u8 lowest_digit;
			if (dist == u16.max)
				lowest_digit = 'M';
			else
				lowest_digit = cast(u8)('0' + dist % 10);

			i32 char_id = cast(i32)lowest_digit - 32;
			i32 from_x = (char_id % 32) * TILE_SIZE;
			i32 from_y = (char_id / 32) * TILE_SIZE;
			SDL_Rect from = SDL_Rect(from_x, from_y, TILE_SIZE, TILE_SIZE);
			SDL_Rect to = SDL_Rect(
				x * scale * TILE_SIZE + map.view_offset_x,
				y * scale * TILE_SIZE + map.view_offset_y,
				TILE_SIZE * scale, TILE_SIZE * scale);

			SDL_RenderCopy(win.sdl_renderer, win.font, &from, &to);
		}
	}
}

void render_bar(Window* win, i32 x, i32 y, i32 total_width, u8[] name, i32 value, i32 max_value, Color bar_color, Color back_color)
{
	i32 bar_width = value / (max_value * total_width);
}

GameMap global_map;

enum GameState : u8 {
	PLAYER_TURN = 0,
	ENEMY_TURN = 1,
	PLAYER_DEAD = 2,
}

i32 main(void* hInstance, void* hPrevInstance, u8* lpCmdLine, i32 nShowCmd)
{
	Window win;
	i32 screen_width = 1200;
	i32 screen_height = 600;
	enum BAR_WIDTH = 20;
	enum PANEL_HEIGHT = 7;
	i32 panel_y = screen_height - PANEL_HEIGHT;

	window_init(&win, screen_width, screen_height, "RL tutorial in Vox lang");

	bool run = true;
	SDL_Event e;

	GameMap* map = &global_map;
	map.init(screen_width, screen_height);

	Entity* player = &map.entities[map.playerId];
	bool recalc_fov = true;

	while (run)
	{
		i32 mouse_x;
		i32 mouse_y;
		u32 buttons_pressed = SDL_GetMouseState(&mouse_x, &mouse_y);
		i32 cursor_map_x = (mouse_x - map.view_offset_x) / (TILE_SIZE * scale);
		i32 cursor_map_y = (mouse_y - map.view_offset_y) / (TILE_SIZE * scale);

		if (map.valid_pos(cursor_map_x, cursor_map_y))
		{
			if (buttons_pressed & SDL_BUTTON_LEFT_MASK)
			{
				map.tiles[cursor_map_y][cursor_map_x].flags |= TileFlags.blocks_walk | TileFlags.blocks_sight;
				recalc_fov = true;
			}
			else if (buttons_pressed & SDL_BUTTON_RIGHT_MASK)
			{
				map.tiles[cursor_map_y][cursor_map_x].flags &= ~(TileFlags.blocks_walk | TileFlags.blocks_sight);
				recalc_fov = true;
			}
		}

		while (SDL_PollEvent(&e) != 0)
		{
			i32 dx;
			i32 dy;
			bool doMove = false;

			if (e.type == SDL_EventType.SDL_QUIT) {
				run = false;
			}
			else if (e.type == SDL_EventType.SDL_KEYDOWN)
			{
				SDL_KeyboardEvent* key = cast(SDL_KeyboardEvent*)&e;
				u32 scancode = key.keysym.scancode;
				if (scancode == SDL_Scancode.SDL_SCANCODE_ESCAPE) {
					run = false;
				}

				if (scancode >= SDL_Scancode.SDL_SCANCODE_KP_1 && scancode <= SDL_Scancode.SDL_SCANCODE_KP_9) {
					doMove = true;
				}

				switch (scancode)
				{
					SDL_Scancode.SDL_SCANCODE_KP_1 { dx = -1; dy = 1; }
					SDL_Scancode.SDL_SCANCODE_KP_2 { dy = -1; dy = 1; }
					SDL_Scancode.SDL_SCANCODE_KP_3 { dx =  1; dy = 1; }
					SDL_Scancode.SDL_SCANCODE_KP_4 { dx = -1; }
					SDL_Scancode.SDL_SCANCODE_KP_5 {
						// wait
						if (map.game_state == GameState.PLAYER_TURN)
						{
							map.game_state = GameState.ENEMY_TURN;
							continue;
						}
					}
					SDL_Scancode.SDL_SCANCODE_KP_6 { dx = 1; }
					SDL_Scancode.SDL_SCANCODE_KP_7 { dx = -1; dy = -1; }
					SDL_Scancode.SDL_SCANCODE_KP_8 { dy = -1; dy = -1; }
					SDL_Scancode.SDL_SCANCODE_KP_9 { dx = 1; dy = -1; }
					SDL_Scancode.SDL_SCANCODE_LEFTBRACKET {
						if (map.view_radius > 0) {
							--map.view_radius;
							recalc_fov = true;
						}
					}
					SDL_Scancode.SDL_SCANCODE_RIGHTBRACKET {
						++map.view_radius;
						recalc_fov = true;
					}
					SDL_Scancode.SDL_SCANCODE_F1 {
						map.show_dmap = !map.show_dmap;
					}
					else {}
				}
			}

			if (doMove && map.game_state == GameState.PLAYER_TURN)
			{
				i32 destx = player.x + dx;
				i32 desty = player.y + dy;

				if (!map.blocks_walk(destx, desty))
				{
					EntityId targetId = map.get_blocking_entities_at_location(destx, desty);

					if (targetId != EntityId.max)
					{
						attack(map, map.playerId, targetId);
					}
					else
					{
						recalc_fov = true;
						map.move_to(map.playerId, destx, desty);
					}
					map.game_state = GameState.ENEMY_TURN;
				}
			}
		}

		if (map.game_state == GameState.ENEMY_TURN)
		{
			map.game_state = GameState.PLAYER_TURN;
			for (EntityId i = 1; i < map.num_entities; ++i)
			{
				Entity* e = &map.entities[i];
				if (e.ai == AiId.max) continue;
				do_ai(map, i, map.playerId);
				if (map.game_state == GameState.PLAYER_DEAD) break;
			}
		}

		SDL_SetRenderDrawColor(win.sdl_renderer, 0, 0, 0, 0);
		SDL_RenderClear(win.sdl_renderer);

		if (recalc_fov) {
			update_fov(map, player);
			update_distance_maps(map, player);
			map.update_view_offset(player.x, player.y);
			recalc_fov = false;
		}
		render_all(&win, map, Point(cursor_map_x, cursor_map_y));
		SDL_RenderPresent(win.sdl_renderer);
		SDL_Delay(40);
	}

	window_destroy(&win);
	ExitProcess(0);
	return 0;
}
